// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.SearchPage.selectDateFrmCalender_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MobileTestAutomation.Utility;
    using System.Globalization;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class selectDateFrmCalender_Map:logWriter
    {

        /// <summary>
        /// selectDateFrmCalender_Method
        /// </summary>
        public Tuple<int, bool, bool> selectDateFrmCalender_Method(DateTime SelectableDATE, string dfultslctdMonYear)
        {
            #region Variable Declarations
            HtmlHyperlink uIItem23Hyperlink = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIUidatepickerdivPane.UIItem23Hyperlink;
            #endregion
            int SelectableMonthNum = Convert.ToInt32(SelectableDATE.Month.ToString());
            System.Globalization.DateTimeFormatInfo mfi = new
            System.Globalization.DateTimeFormatInfo();
            string strMonthName = mfi.GetMonthName(SelectableMonthNum).ToString();

            string SelectableYear = SelectableDATE.Year.ToString();

            string SelectableMonthYear = strMonthName + " " + SelectableYear;

            //Month Diff// 
            string[] ArrDfltYear = dfultslctdMonYear.Split(' ');
            string DfltYear = ArrDfltYear[1];
            int DiffMnths = 0;
            Boolean PreviousTobeClicked = false;
            Boolean NextTobeClicked = false;
            int DfltmnthNum = DateTime.ParseExact(ArrDfltYear[0], "MMMM", CultureInfo.InvariantCulture).Month;
            if (SelectableYear == DfltYear)
            {
                DiffMnths = SelectableMonthNum - DfltmnthNum;
                if (DiffMnths < 0)
                {
                    PreviousTobeClicked = true;
                }
                else if (DiffMnths > 0)
                {
                    NextTobeClicked = true;
                }
            }
            else if(Convert.ToInt32(SelectableYear) != Convert.ToInt32(DfltYear))
            {
                int RemainingMnthsinCurrentYear = 0;
                if (Convert.ToInt32(SelectableYear) < Convert.ToInt32(DfltYear))
                {
                    PreviousTobeClicked = true;
                    RemainingMnthsinCurrentYear = 12 - SelectableMonthNum;
                    DiffMnths = RemainingMnthsinCurrentYear + DfltmnthNum;
                }
                else
                {
                    NextTobeClicked = true;
                    RemainingMnthsinCurrentYear = 12 - DfltmnthNum;
                    DiffMnths = RemainingMnthsinCurrentYear + SelectableMonthNum;
                }
            }
          
            if (SelectableMonthYear == dfultslctdMonYear)
                {
                    UITestControlCollection allselectabledates = uIItem23Hyperlink.FindMatchingControls();
                    int Numofselectabledates = allselectabledates.Count;
                    int SelectableDate = Convert.ToInt32(SelectableDATE.Day.ToString());

                    foreach (UITestControl link in allselectabledates)
                    {
                        int linkname = Convert.ToInt32(link.FriendlyName);
                        if (linkname == SelectableDate)
                        {
                            try
                            {
                                Mouse.Click(link);
                                WriteLogs("PASS : Selected \"" + linkname + ' ' + dfultslctdMonYear + "\"  as a Departure Date from Calender.");
                                break;
                            }
                            catch (AssertFailedException ex)
                            {
                                WriteLogs("FAIL : Could not Select the Departure Date.");
                                WriteLogs("-----------------" + ex.Message.ToString());
                            }
                        }
                    }
                }
                var tuple = new Tuple<int, bool, bool>(DiffMnths, NextTobeClicked, PreviousTobeClicked);
                return tuple;
            }
        

        public void TempselectDateFrmCalender_Method()
        {
            #region Variable Declarations
            HtmlHyperlink uIItem23Hyperlink = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIUidatepickerdivPane.UIItem23Hyperlink;
            #endregion

            Mouse.Click(uIItem23Hyperlink);
        }

        public void DragingCalControl_Method()
        {
            #region Variable Declarations
            HtmlHyperlink uIItem23Hyperlink = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIUidatepickerdivPane.UIItem23Hyperlink;
            #endregion

            Mouse.StartDragging(uIItem23Hyperlink);

           
        }

        //public Boolean verifyifnexttoclickedfrmcal_Method(DateTime SelectableDATE, string dfultslctdMonYear)
        //{
        //    #region Variable Declarations
        //    HtmlHyperlink uIItem23Hyperlink = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIUidatepickerdivPane.UIItem23Hyperlink;
        //    #endregion

        //    //int NumofMonthsListed = uIItemComboBox.ItemCount;
        //    Boolean slctnextfrmCal = false;
        //    int SelectableMonthNum = Convert.ToInt32(SelectableDATE.Month.ToString());
        //    System.Globalization.DateTimeFormatInfo mfi = new
        //    System.Globalization.DateTimeFormatInfo();
        //    string strMonthName = mfi.GetMonthName(SelectableMonthNum).ToString();

        //    string SelectableYear = SelectableDATE.Year.ToString();

        //    string SelectableMonthYear = strMonthName + " " + SelectableYear;

        //    if (SelectableMonthYear == dfultslctdMonYear)
        //    {
        //        slctnextfrmCal = false;
        //    }
        //    else
        //    {
        //        slctnextfrmCal = true;
        //    }

        //    return slctnextfrmCal;
        //}

        
        #region Properties
        public UISearchVillaPlusWindoWindow UISearchVillaPlusWindoWindow
        {
            get
            {
                if ((this.mUISearchVillaPlusWindoWindow == null))
                {
                    this.mUISearchVillaPlusWindoWindow = new UISearchVillaPlusWindoWindow();
                }
                return this.mUISearchVillaPlusWindoWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISearchVillaPlusWindoWindow mUISearchVillaPlusWindoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusWindoWindow : BrowserWindow
    {
        
        public UISearchVillaPlusWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISearchVillaPlusDocument UISearchVillaPlusDocument
        {
            get
            {
                if ((this.mUISearchVillaPlusDocument == null))
                {
                    this.mUISearchVillaPlusDocument = new UISearchVillaPlusDocument(this);
                }
                return this.mUISearchVillaPlusDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISearchVillaPlusDocument mUISearchVillaPlusDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusDocument : HtmlDocument
    {
        
        public UISearchVillaPlusDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/search", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/search", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public UIUidatepickerdivPane UIUidatepickerdivPane
        {
            get
            {
                if ((this.mUIUidatepickerdivPane == null))
                {
                    this.mUIUidatepickerdivPane = new UIUidatepickerdivPane(this);
                }
                return this.mUIUidatepickerdivPane;
            }
        }
        #endregion
        
        #region Fields
        private UIUidatepickerdivPane mUIUidatepickerdivPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUidatepickerdivPane : HtmlDiv
    {
        
        public UIUidatepickerdivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ui-datepicker-div";
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "atmm hasDatepicker";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"atmm hasDatepicker\" id=\"ui-datepicker-div\"";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlHyperlink UIItem23Hyperlink
        {
            get
            {
                if ((this.mUIItem23Hyperlink == null))
                {
                    this.mUIItem23Hyperlink = new HtmlHyperlink(this);
                    #region Search Criteria
                    this.mUIItem23Hyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.AbsolutePath, "/search", PropertyExpressionOperator.Contains));
                    this.mUIItem23Hyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.Href, ".villaplus.com/search#", PropertyExpressionOperator.Contains));
                    this.mUIItem23Hyperlink.FilterProperties.Add(new PropertyExpression(HtmlHyperlink.PropertyNames.Class, "ui-state-default", PropertyExpressionOperator.Contains));
                    this.mUIItem23Hyperlink.WindowTitles.Add("Search | Villa Plus");
                    #endregion
                }
                return this.mUIItem23Hyperlink;
            }
        }
        #endregion
        
        #region Fields
        private HtmlHyperlink mUIItem23Hyperlink;
        #endregion
    }
}
