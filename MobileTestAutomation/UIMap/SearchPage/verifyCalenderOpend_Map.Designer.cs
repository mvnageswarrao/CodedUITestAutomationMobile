// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.SearchPage.verifyCalenderOpend_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using System.Linq;
    using System.Text;

    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyCalenderOpend_Map
    {
        
        /// <summary>
        /// verifyCalenderOpend_Method - Use 'verifyCalenderOpend_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public string verifyCalenderOpend_Method()
        {
            #region Variable Declarations
            HtmlDiv uIPrevNextMarch2015MonPane = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIUidatepickerdivPane.UIPrevNextMarch2015MonPane;
            #endregion
            Boolean iscalEXISTS = true;

            var btnPosition = uIPrevNextMarch2015MonPane.BoundingRectangle;
            Point relativePoint = new Point();
            relativePoint = new Point(btnPosition.X, btnPosition.Y);
            if (btnPosition.Y != 111)
            {
                iscalEXISTS = true;
            }
            else
            {
                iscalEXISTS = false;
            }
             
            string defselectedMonYear = uIPrevNextMarch2015MonPane.InnerText.Remove(0, 7);
            string[] arrdefselectedMonYear = defselectedMonYear.Split(' ');
            defselectedMonYear = arrdefselectedMonYear[0].Replace("t\r\n", string.Empty) + ' ' + arrdefselectedMonYear[1];

            return defselectedMonYear;
        }

        public Boolean verifyifcalalreadyopened_Method(string DefaultSelectedDATE, string DESTdefaultselection, string SelectedCENTER, List<string> DatesLIST)
        {
            #region Variable Declarations
            HtmlDiv uIPrevNextMarch2015MonPane = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIUidatepickerdivPane.UIPrevNextMarch2015MonPane;
            #endregion

            var btnPosition = uIPrevNextMarch2015MonPane.BoundingRectangle;
            Point relativePoint = new Point();
            relativePoint = new Point(btnPosition.X, btnPosition.Y);

            Boolean iscalEXISTS;
            //string ModMonthNum = string.Empty;

            //string[] ArrDefaultSelectedDATE = DefaultSelectedDATE.Split(' ');
            //string Month = ArrDefaultSelectedDATE[1];
            //int monthNum = DateTime.ParseExact(Month, "MMMM",System.Globalization.CultureInfo.InvariantCulture).Month;
            //            //string ModDate = monthNum+"/"+ArrDefaultSelectedDATE[0]+"/"+ArrDefaultSelectedDATE[2];
            //if(Convert.ToInt32(ArrDefaultSelectedDATE[0]) < 10)
            //{
            //    ArrDefaultSelectedDATE[0] = '0' + ArrDefaultSelectedDATE[0];
            //}
            //if (monthNum < 10)
            //{
            //    ModMonthNum = '0' + monthNum.ToString();
            //}
            //else
            //{
            //    ModMonthNum = monthNum.ToString();
            //}
            //string ModDate = ArrDefaultSelectedDATE[0] + "-" + ModMonthNum + "-" + ArrDefaultSelectedDATE[2];
            


            //foreach (string DateList in DatesLIST)
            //{
            //    string DateListNew = DateList.Replace("00:00:00", "").Trim();
            //    if (DateListNew.Trim().Equals(ModDate.Trim()))
            //    {
            //        iscalEXISTS = false;
            //        break;
            //    }
              
            //}
            if (btnPosition.Y != 111)
            {
                iscalEXISTS = true;
            }
            else
            {
                iscalEXISTS = false;
            }
            return iscalEXISTS;
        }
        
        #region Properties
        public virtual verifyCalenderOpend_MethodExpectedValues verifyCalenderOpend_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyCalenderOpend_MethodExpectedValues == null))
                {
                    this.mverifyCalenderOpend_MethodExpectedValues = new verifyCalenderOpend_MethodExpectedValues();
                }
                return this.mverifyCalenderOpend_MethodExpectedValues;
            }
        }
        
        public UISearchVillaPlusWindoWindow UISearchVillaPlusWindoWindow
        {
            get
            {
                if ((this.mUISearchVillaPlusWindoWindow == null))
                {
                    this.mUISearchVillaPlusWindoWindow = new UISearchVillaPlusWindoWindow();
                }
                return this.mUISearchVillaPlusWindoWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyCalenderOpend_MethodExpectedValues mverifyCalenderOpend_MethodExpectedValues;
        
        private UISearchVillaPlusWindoWindow mUISearchVillaPlusWindoWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyCalenderOpend_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyCalenderOpend_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'PrevNext March 2015 Mon Tue' pane equals 'PrevNext'
        /// </summary>
        public string UIPrevNextMarch2015MonPaneFriendlyName = "PrevNext";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusWindoWindow : BrowserWindow
    {
        
        public UISearchVillaPlusWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISearchVillaPlusDocument UISearchVillaPlusDocument
        {
            get
            {
                if ((this.mUISearchVillaPlusDocument == null))
                {
                    this.mUISearchVillaPlusDocument = new UISearchVillaPlusDocument(this);
                }
                return this.mUISearchVillaPlusDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISearchVillaPlusDocument mUISearchVillaPlusDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusDocument : HtmlDocument
    {
        
        public UISearchVillaPlusDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/search", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/search", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public UIUidatepickerdivPane UIUidatepickerdivPane
        {
            get
            {
                if ((this.mUIUidatepickerdivPane == null))
                {
                    this.mUIUidatepickerdivPane = new UIUidatepickerdivPane(this);
                }
                return this.mUIUidatepickerdivPane;
            }
        }
        #endregion
        
        #region Fields
        private UIUidatepickerdivPane mUIUidatepickerdivPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIUidatepickerdivPane : HtmlDiv
    {
        
        public UIUidatepickerdivPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDiv.PropertyNames.Id] = "ui-datepicker-div";
            this.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.InnerText, "The date", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDiv.PropertyNames.Class] = "atmm hasDatepicker";
            this.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"atmm hasDatepicker\" id=\"ui-datepicker-div\"";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlDiv UIPrevNextMarch2015MonPane
        {
            get
            {
                if ((this.mUIPrevNextMarch2015MonPane == null))
                {
                    this.mUIPrevNextMarch2015MonPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUIPrevNextMarch2015MonPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.InnerText, "PrevNext", PropertyExpressionOperator.Contains));
                    this.mUIPrevNextMarch2015MonPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-clearfix" +
                        " ui-corner-all";
                    this.mUIPrevNextMarch2015MonPane.FilterProperties[HtmlDiv.PropertyNames.ControlDefinition] = "class=\"ui-datepicker-inline ui-datepicker ui-widget ui-widget-content ui-helper-c" +
                        "learfix ui-corner-all\" style=\"display: block;\"";
                    this.mUIPrevNextMarch2015MonPane.WindowTitles.Add("Search | Villa Plus");
                    #endregion
                }
                return this.mUIPrevNextMarch2015MonPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlDiv mUIPrevNextMarch2015MonPane;
        #endregion
    }
}
