// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.SearchPage.verifyValErrwithSingleAdult_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MobileTestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class verifyValErrwithSingleAdult_Map:logWriter
    {
        
        /// <summary>
        /// verifyValErrwithSingleAdult_Method - Use 'verifyValErrwithSingleAdult_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void verifyValErrwithSingleAdult_Method()
        {
            #region Variable Declarations
            HtmlSpan uITheminimumoccupancyiPane = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIPassengersTheminimumLabel.UITheminimumoccupancyiPane;
            #endregion

            string ValErrTextFrmPage = uITheminimumoccupancyiPane.InnerText;
            string ExpectedValErrTxt = "The minimum occupancy is 2 adults or 1 adult and 1 child.";
            
            try
            {
                // Verify that the 'InnerText' property of 'The minimum occupancy is 2 adults or 1 a' pane equals 'The minimum occupancy is 2 adults or 1 adult and 1 child.'
                //Assert.AreEqual(this.verifyValErrwithSingleAdult_MethodExpectedValues.UITheminimumoccupancyiPaneInnerText, uITheminimumoccupancyiPane.InnerText);
                Assert.AreEqual(ExpectedValErrTxt, ValErrTextFrmPage);
                WriteLogs("PASS : Minimum Occuapcy Error displayed Properly.");
            }
            catch (AssertFailedException ex)
            {
                WriteLogs("FAIL : Minimum Occuapcy Error NOT displayed.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

        }
        
        #region Properties
        public virtual verifyValErrwithSingleAdult_MethodExpectedValues verifyValErrwithSingleAdult_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyValErrwithSingleAdult_MethodExpectedValues == null))
                {
                    this.mverifyValErrwithSingleAdult_MethodExpectedValues = new verifyValErrwithSingleAdult_MethodExpectedValues();
                }
                return this.mverifyValErrwithSingleAdult_MethodExpectedValues;
            }
        }
        
        public UISearchVillaPlusWindoWindow UISearchVillaPlusWindoWindow
        {
            get
            {
                if ((this.mUISearchVillaPlusWindoWindow == null))
                {
                    this.mUISearchVillaPlusWindoWindow = new UISearchVillaPlusWindoWindow();
                }
                return this.mUISearchVillaPlusWindoWindow;
            }
        }
        #endregion
        
        #region Fields
        private verifyValErrwithSingleAdult_MethodExpectedValues mverifyValErrwithSingleAdult_MethodExpectedValues;
        
        private UISearchVillaPlusWindoWindow mUISearchVillaPlusWindoWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'verifyValErrwithSingleAdult_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class verifyValErrwithSingleAdult_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'The minimum occupancy is 2 adults or 1 a' pane equals 'The minimum occupancy is 2 adults or 1 adult and 1 child.'
        /// </summary>
        public string UITheminimumoccupancyiPaneInnerText = "The minimum occupancy is 2 adults or 1 adult and 1 child.";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusWindoWindow : BrowserWindow
    {
        
        public UISearchVillaPlusWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISearchVillaPlusDocument UISearchVillaPlusDocument
        {
            get
            {
                if ((this.mUISearchVillaPlusDocument == null))
                {
                    this.mUISearchVillaPlusDocument = new UISearchVillaPlusDocument(this);
                }
                return this.mUISearchVillaPlusDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISearchVillaPlusDocument mUISearchVillaPlusDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusDocument : HtmlDocument
    {
        
        public UISearchVillaPlusDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/search", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/search", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public UIPassengersTheminimumLabel UIPassengersTheminimumLabel
        {
            get
            {
                if ((this.mUIPassengersTheminimumLabel == null))
                {
                    this.mUIPassengersTheminimumLabel = new UIPassengersTheminimumLabel(this);
                }
                return this.mUIPassengersTheminimumLabel;
            }
        }
        #endregion
        
        #region Fields
        private UIPassengersTheminimumLabel mUIPassengersTheminimumLabel;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIPassengersTheminimumLabel : HtmlLabel
    {
        
        public UIPassengersTheminimumLabel(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlLabel.PropertyNames.Id] = "lblPax";
            this.SearchProperties.Add(new PropertyExpression(HtmlLabel.PropertyNames.InnerText, "The minimum occupancy", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlLabel.PropertyNames.Class] = "errContainer";
            this.FilterProperties[HtmlLabel.PropertyNames.ControlDefinition] = "class=\"errContainer\" id=\"lblPax\"";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlSpan UITheminimumoccupancyiPane
        {
            get
            {
                if ((this.mUITheminimumoccupancyiPane == null))
                {
                    this.mUITheminimumoccupancyiPane = new HtmlSpan(this);
                    #region Search Criteria
                    this.mUITheminimumoccupancyiPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.InnerText, "The minimum occupancy", PropertyExpressionOperator.Contains));
                    this.mUITheminimumoccupancyiPane.FilterProperties[HtmlDiv.PropertyNames.Class] = "val-error";
                    this.mUITheminimumoccupancyiPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.ControlDefinition, "class=\"val-error\"", PropertyExpressionOperator.Contains));
                    this.mUITheminimumoccupancyiPane.WindowTitles.Add("Search | Villa Plus");
                    #endregion
                }
                return this.mUITheminimumoccupancyiPane;
            }
        }
        #endregion
        
        #region Fields
        private HtmlSpan mUITheminimumoccupancyiPane;
        #endregion
    }
}
