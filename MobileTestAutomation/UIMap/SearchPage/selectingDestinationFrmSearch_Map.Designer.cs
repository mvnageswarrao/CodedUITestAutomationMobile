// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.SearchPage.selectingDestinationFrmSearch_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MobileTestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public partial class selectingDestinationFrmSearch_Map:logWriter
    {
        
        /// <summary>
        /// selectingDestinationFrmSearch_Method
        /// </summary>
        public string selectingDestinationFrmSearch_Method(List<string> centreNAMEList, string DESTdefaultselection)
        {
             #region Variable Declarations
            HtmlCustom uIItemCustom = this.UISearchVillaPlusWindoWindow.UISearchVillaPlusDocument.UIDestResortVillaListCustom.UIItemCustom;
            #endregion

            //string[] DestList = uIItemCustom.
            //int NumofCentersFrmPage = DestList.Length;

            int NumofCentersFrmDB = centreNAMEList.Count;
            string SelectableCenter = string.Empty;
            string SelectedCenter = string.Empty;
            string centrnamefromPage = string.Empty;

            do
            {
                Random rnd = new Random();
                int randomcenterindex = rnd.Next(0, NumofCentersFrmDB);
                SelectableCenter = centreNAMEList[randomcenterindex];
                SelectableCenter = SelectableCenter.Trim();
            } while (SelectableCenter == DESTdefaultselection);


             try
            {      
                 UITestControlCollection Allcenters = uIItemCustom.FindMatchingControls();
                 int centercount = Allcenters.Count;
                 foreach (HtmlCustom eachcenter in Allcenters)
                 {
                    centrnamefromPage = eachcenter.InnerText;
                    string[] arrcentrnamefromPage = centrnamefromPage.Split('(');
                    centrnamefromPage = arrcentrnamefromPage[0].Trim();

                     if(SelectableCenter==centrnamefromPage)
                     {
                         Mouse.Click(eachcenter);
                         SelectedCenter = eachcenter.InnerText.Trim();
                            break;
                     }
                     else
                     {
                         continue;
                     }
                 }

                 WriteLogs("PASS : Selected \"" + SelectedCenter + "\" as a Center from Destination list.");
            }
            catch (AssertFailedException ex)
            {
                WriteLogs("FAIL : Could Not Select Destination.");
                WriteLogs("-----------------" + ex.Message.ToString());
            }

             return centrnamefromPage;
        }
   
        #region Properties
        public UISearchVillaPlusWindoWindow UISearchVillaPlusWindoWindow
        {
            get
            {
                if ((this.mUISearchVillaPlusWindoWindow == null))
                {
                    this.mUISearchVillaPlusWindoWindow = new UISearchVillaPlusWindoWindow();
                }
                return this.mUISearchVillaPlusWindoWindow;
            }
        }
        #endregion
        
        #region Fields
        private UISearchVillaPlusWindoWindow mUISearchVillaPlusWindoWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusWindoWindow : BrowserWindow
    {
        
        public UISearchVillaPlusWindoWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UISearchVillaPlusDocument UISearchVillaPlusDocument
        {
            get
            {
                if ((this.mUISearchVillaPlusDocument == null))
                {
                    this.mUISearchVillaPlusDocument = new UISearchVillaPlusDocument(this);
                }
                return this.mUISearchVillaPlusDocument;
            }
        }
        #endregion
        
        #region Fields
        private UISearchVillaPlusDocument mUISearchVillaPlusDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UISearchVillaPlusDocument : HtmlDocument
    {
        
        public UISearchVillaPlusDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Search | Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/search", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/search", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public UIDestResortVillaListCustom UIDestResortVillaListCustom
        {
            get
            {
                if ((this.mUIDestResortVillaListCustom == null))
                {
                    this.mUIDestResortVillaListCustom = new UIDestResortVillaListCustom(this);
                }
                return this.mUIDestResortVillaListCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIDestResortVillaListCustom mUIDestResortVillaListCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.60315.1")]
    public class UIDestResortVillaListCustom : HtmlCustom
    {
        
        public UIDestResortVillaListCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "SECTION";
            this.SearchProperties["Id"] = "destResortVillaList";
            this.FilterProperties["ControlDefinition"] = "id=\"destResortVillaList\"";
            this.WindowTitles.Add("Search | Villa Plus");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUIItemCustom.SearchProperties["TagName"] = "A";
                    this.mUIItemCustom.WindowTitles.Add("Search | Villa Plus");
                    #endregion
                }
                return this.mUIItemCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUIItemCustom;
        #endregion
    }
}
