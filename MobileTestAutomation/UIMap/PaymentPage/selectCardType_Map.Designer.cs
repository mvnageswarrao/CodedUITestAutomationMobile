// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.PaymentPage.selectCardType_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MobileTestAutomation.Utility;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class selectCardType_Map:logWriter
    {
        public string selectCardType_Method()
        {
            #region Variable Declarations
            HtmlComboBox uICreditCardSelectedCaComboBox = this.UIVillaPlusPaymentInteWindow.UIVillaPlusPaymentDocument.UICreditCardSelectedCaComboBox;
            #endregion
            Keyboard.SendKeys("{PGDN}");
            Mouse.MoveScrollWheel(uICreditCardSelectedCaComboBox, -15);
            uICreditCardSelectedCaComboBox.SetFocus();

            string cards = uICreditCardSelectedCaComboBox.InnerText;
            string[] cardsarr = cards.Split(' ');
            Random rnd = new Random();
            int rndindx = rnd.Next(1, cardsarr.Length);
            string selectableCard = cardsarr[rndindx];
            
            try
            {
                uICreditCardSelectedCaComboBox.SelectedItem = selectableCard;
                WriteLogs("PASS : \"" + selectableCard + "\" Card is Selected from List.");
            }
            catch (Exception ex)
            {
                WriteLogs("FAIL : Could Not select a \"Credit Card\" From List.");
                WriteLogs("--------" + ex.Message.ToString());
            }
            return selectableCard;
        }

        public HtmlComboBox getCardType_Method()
        {
            #region Variable Declarations
            HtmlComboBox uICreditCardSelectedCaComboBox = this.UIVillaPlusPaymentInteWindow.UIVillaPlusPaymentDocument.UICreditCardSelectedCaComboBox;
            #endregion

            return uICreditCardSelectedCaComboBox;
        }

        #region Properties
        public virtual selectCardType_MethodParams selectCardType_MethodParams
        {
            get
            {
                if ((this.mselectCardType_MethodParams == null))
                {
                    this.mselectCardType_MethodParams = new selectCardType_MethodParams();
                }
                return this.mselectCardType_MethodParams;
            }
        }
        
        public UIVillaPlusPaymentInteWindow UIVillaPlusPaymentInteWindow
        {
            get
            {
                if ((this.mUIVillaPlusPaymentInteWindow == null))
                {
                    this.mUIVillaPlusPaymentInteWindow = new UIVillaPlusPaymentInteWindow();
                }
                return this.mUIVillaPlusPaymentInteWindow;
            }
        }
        #endregion
        
        #region Fields
        private selectCardType_MethodParams mselectCardType_MethodParams;
        
        private UIVillaPlusPaymentInteWindow mUIVillaPlusPaymentInteWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'selectCardType_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class selectCardType_MethodParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'MasterCard (£50.54 Charge)' in 'CreditCard.SelectedCardScheme' combo box
        /// </summary>
        public string UICreditCardSelectedCaComboBoxSelectedItem = "MasterCard (£50.54 Charge)";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIVillaPlusPaymentInteWindow : BrowserWindow
    {
        
        public UIVillaPlusPaymentInteWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Villa Plus", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Villa Plus | Payment");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIVillaPlusPaymentDocument UIVillaPlusPaymentDocument
        {
            get
            {
                if ((this.mUIVillaPlusPaymentDocument == null))
                {
                    this.mUIVillaPlusPaymentDocument = new UIVillaPlusPaymentDocument(this);
                }
                return this.mUIVillaPlusPaymentDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIVillaPlusPaymentDocument mUIVillaPlusPaymentDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIVillaPlusPaymentDocument : HtmlDocument
    {
        
        public UIVillaPlusPaymentDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "book";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Villa Plus", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/booking/payment", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/booking/payment", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Villa Plus | Payment");
            #endregion
        }
        
        #region Properties
        public HtmlComboBox UICreditCardSelectedCaComboBox
        {
            get
            {
                if ((this.mUICreditCardSelectedCaComboBox == null))
                {
                    this.mUICreditCardSelectedCaComboBox = new HtmlComboBox(this);
                    #region Search Criteria
                    this.mUICreditCardSelectedCaComboBox.SearchProperties.Add(new PropertyExpression(HtmlComboBox.PropertyNames.Id, "CreditCard.SelectedCardScheme", PropertyExpressionOperator.Contains));
                    this.mUICreditCardSelectedCaComboBox.SearchProperties.Add(new PropertyExpression(HtmlComboBox.PropertyNames.Name, "CreditCard.SelectedCardScheme", PropertyExpressionOperator.Contains));
                    this.mUICreditCardSelectedCaComboBox.FilterProperties.Add(new PropertyExpression(HtmlComboBox.PropertyNames.ControlDefinition, "name=\"CreditCard.SelectedCardScheme\"", PropertyExpressionOperator.Contains));
                    this.mUICreditCardSelectedCaComboBox.WindowTitles.Add("Villa Plus | Payment");
                    #endregion
                }
                return this.mUICreditCardSelectedCaComboBox;
            }
        }
        #endregion
        
        #region Fields
        private HtmlComboBox mUICreditCardSelectedCaComboBox;
        #endregion
    }
}
