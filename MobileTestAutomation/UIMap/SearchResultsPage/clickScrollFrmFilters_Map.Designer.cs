// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.SearchResultsPage.clickScrollFrmFilters_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class clickScrollFrmFilters_Map
    {
        
        /// <summary>
        /// clickScrollFrmFilters_Method - Use 'clickScrollFrmFilters_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void clickScrollFrmFilters_Method()
        {
            #region Variable Declarations
            HtmlScrollBar uIItemScrollBar = this.UIYoursearchfound37VilWindow.UIYoursearchfound37VilDocument.UIPanelfilterbyCustom.UIItemScrollBar;
            #endregion

            Boolean IsExists = uIItemScrollBar.Exists;
            if (IsExists == true)
            {
                Mouse.MoveScrollWheel(uIItemScrollBar, -15);
            }
            // Verify that the 'Exists' property of scroll bar equals 'True'
            //Assert.AreEqual(this.clickScrollFrmFilters_MethodExpectedValues.UIItemScrollBarExists, uIItemScrollBar.Exists);
        }
        
        #region Properties
        public virtual clickScrollFrmFilters_MethodExpectedValues clickScrollFrmFilters_MethodExpectedValues
        {
            get
            {
                if ((this.mclickScrollFrmFilters_MethodExpectedValues == null))
                {
                    this.mclickScrollFrmFilters_MethodExpectedValues = new clickScrollFrmFilters_MethodExpectedValues();
                }
                return this.mclickScrollFrmFilters_MethodExpectedValues;
            }
        }
        
        public UIYoursearchfound37VilWindow UIYoursearchfound37VilWindow
        {
            get
            {
                if ((this.mUIYoursearchfound37VilWindow == null))
                {
                    this.mUIYoursearchfound37VilWindow = new UIYoursearchfound37VilWindow();
                }
                return this.mUIYoursearchfound37VilWindow;
            }
        }
        #endregion
        
        #region Fields
        private clickScrollFrmFilters_MethodExpectedValues mclickScrollFrmFilters_MethodExpectedValues;
        
        private UIYoursearchfound37VilWindow mUIYoursearchfound37VilWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'clickScrollFrmFilters_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class clickScrollFrmFilters_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Exists' property of scroll bar equals 'True'
        /// </summary>
        public bool UIItemScrollBarExists = true;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYoursearchfound37VilWindow : BrowserWindow
    {
        
        public UIYoursearchfound37VilWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your search found", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your search found 37 Villa holidays;");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYoursearchfound37VilDocument UIYoursearchfound37VilDocument
        {
            get
            {
                if ((this.mUIYoursearchfound37VilDocument == null))
                {
                    this.mUIYoursearchfound37VilDocument = new UIYoursearchfound37VilDocument(this);
                }
                return this.mUIYoursearchfound37VilDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYoursearchfound37VilDocument mUIYoursearchfound37VilDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYoursearchfound37VilDocument : HtmlDocument
    {
        
        public UIYoursearchfound37VilDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your search found", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/search/searchresult";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/search/searchresult", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your search found 37 Villa holidays;");
            #endregion
        }
        
        #region Properties
        public UIPanelfilterbyCustom UIPanelfilterbyCustom
        {
            get
            {
                if ((this.mUIPanelfilterbyCustom == null))
                {
                    this.mUIPanelfilterbyCustom = new UIPanelfilterbyCustom(this);
                }
                return this.mUIPanelfilterbyCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIPanelfilterbyCustom mUIPanelfilterbyCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIPanelfilterbyCustom : HtmlCustom
    {
        
        public UIPanelfilterbyCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "SECTION";
            this.SearchProperties["Id"] = "panel-filterby";
            this.FilterProperties["Class"] = "filter-panels";
            this.FilterProperties["ControlDefinition"] = "class=\"filter-panels\" id=\"panel-filterby";
            this.WindowTitles.Add("Your search found 37 Villa holidays;");
            #endregion
        }
        
        #region Properties
        public HtmlScrollBar UIItemScrollBar
        {
            get
            {
                if ((this.mUIItemScrollBar == null))
                {
                    this.mUIItemScrollBar = new HtmlScrollBar(this);
                    #region Search Criteria
                    this.mUIItemScrollBar.SearchProperties[HtmlScrollBar.PropertyNames.Orientation] = "Vertical";
                    this.mUIItemScrollBar.WindowTitles.Add("Your search found 37 Villa holidays;");
                    #endregion
                }
                return this.mUIItemScrollBar;
            }
        }
        #endregion
        
        #region Fields
        private HtmlScrollBar mUIItemScrollBar;
        #endregion
    }
}
