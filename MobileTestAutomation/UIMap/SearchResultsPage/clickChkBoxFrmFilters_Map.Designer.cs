// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.SearchResultsPage.clickChkBoxFrmFilters_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MobileTestAutomation.Utility;
    using MobileTestAutomation.UIMap.SearchResultsPage.clickApplyFilter_MapClasses;
    using MobileTestAutomation.UIMap.SearchResultsPage.clickFilterBy_MapClasses;
    using MobileTestAutomation.UIMap.SearchResultsPage.clickClearFilter_MapClasses;
    using MobileTestAutomation.UIMap.SearchResultsPage.verifySearchCriteriaDisplay_MapClasses;


    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class clickChkBoxFrmFilters_Map:logWriter
    {

        /// <summary>
        /// clickChkBoxFrmFilters_Method - Use 'clickChkBoxFrmFilters_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public void clickChkBoxFrmFilters_Method(string filtertext,Dictionary<string,string> GenericList)
        {
            #region Variable Declarations
            HtmlCustom uICalisCustom = this.UIYoursearchfound1VillWindow.UIYoursearchfound1VillDocument.UIVResortfilterCustom.UICalisCustom;
            HtmlCustom uiVResortfilterCustom = this.UIYoursearchfound1VillWindow.UIYoursearchfound1VillDocument.UIVResortfilterCustom;
            #endregion
            clickApplyFilter_Map BtnApplyFilter = new clickApplyFilter_Map();
            clickFilterBy_Map ClickFilterBy = new clickFilterBy_Map();
            clickClearFilter_Map ClickClearFiletr = new clickClearFilter_Map();
            verifySearchCriteriaDisplay_Map VillaCountonSRPage = new verifySearchCriteriaDisplay_Map();

            UITestControlCollection ui = uiVResortfilterCustom.FindMatchingControls();
            int cnt = ui.Count;
            String FilterTypeName = string.Empty;
            string FilterChkBoxName = string.Empty;
            
            foreach (UITestControl a in ui)
            {
                FilterTypeName = a.FriendlyName.ToString().Trim();
                switch (FilterTypeName)
                {
                    case "VDest-filter":
                        FilterTypeName = "Villa Destinations";
                        break;
                    case "VResort-filter":
                        FilterTypeName = "Resorts";
                        break;
                    case "VType-filter":
                        FilterTypeName = "Villa Type";
                        break;
                    case "Bedroom-filter":
                        FilterTypeName = "Bedroom size";
                        break;
                    case "VDetail-filter":
                        FilterTypeName = "Villa Details";
                        break;
                }
                if (FilterTypeName == filtertext)
                {

                    int ChkBoxesCnt = a.GetChildren().Count;
                    string VillaCntForFiltercount = string.Empty;
                    string FilterName = string.Empty;
                    string ExpCount = string.Empty;
                    UITestControlCollection ChildControls = a.GetChildren();

                    foreach (UITestControl eachchkbox in ChildControls)
                    {
                        FilterChkBoxName = eachchkbox.GetProperty("innertext").ToString().Trim();
                        var ChkBoxPosition = eachchkbox.BoundingRectangle;
                        Point relativePoint = new Point(ChkBoxPosition.X + 100, ChkBoxPosition.Y + 10);
                        Mouse.Move(relativePoint);
                        Mouse.Click(relativePoint);
                        WriteLogs("PASS : Selected \"" + FilterChkBoxName + "\" from \"" + FilterTypeName + "\" Filter.");
                        BtnApplyFilter.clickApplyFilter_Method();
                        foreach (var filterkeyvalue in GenericList)
                        {
                            if(FilterChkBoxName.ToString().Trim().ToLower().Contains(filterkeyvalue.Key.ToString().Trim().ToLower()))
                            {
                                VillaCntForFiltercount = filterkeyvalue.Value.ToString();
                            }
                        }
                        VillaCountonSRPage.verifyVillaCountForallFilters_Method(FilterTypeName,FilterChkBoxName, VillaCntForFiltercount);
                        ClickFilterBy.clickFilterBy_Method();
                        ClickClearFiletr.clickClearFilter_Method();
                        ClickFilterBy.clickFilterBy_Method();
                    }
                }
            }
        }
        
        #region Properties
        public virtual clickChkBoxFrmFilters_MethodExpectedValues clickChkBoxFrmFilters_MethodExpectedValues
        {
            get
            {
                if ((this.mclickChkBoxFrmFilters_MethodExpectedValues == null))
                {
                    this.mclickChkBoxFrmFilters_MethodExpectedValues = new clickChkBoxFrmFilters_MethodExpectedValues();
                }
                return this.mclickChkBoxFrmFilters_MethodExpectedValues;
            }
        }
        
        public UIYoursearchfound1VillWindow UIYoursearchfound1VillWindow
        {
            get
            {
                if ((this.mUIYoursearchfound1VillWindow == null))
                {
                    this.mUIYoursearchfound1VillWindow = new UIYoursearchfound1VillWindow();
                }
                return this.mUIYoursearchfound1VillWindow;
            }
        }
        #endregion
        
        #region Fields
        private clickChkBoxFrmFilters_MethodExpectedValues mclickChkBoxFrmFilters_MethodExpectedValues;
        
        private UIYoursearchfound1VillWindow mUIYoursearchfound1VillWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'clickChkBoxFrmFilters_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class clickChkBoxFrmFilters_MethodExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Calis' custom control equals '  Calis  '
        /// </summary>
        public string UICalisCustomInnerText = "  Calis  ";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYoursearchfound1VillWindow : BrowserWindow
    {
        
        public UIYoursearchfound1VillWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "Your search found", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            this.WindowTitles.Add("Your search found 1 Villa holidays;");
            #endregion
        }
        
        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }
        
        #region Properties
        public UIYoursearchfound1VillDocument UIYoursearchfound1VillDocument
        {
            get
            {
                if ((this.mUIYoursearchfound1VillDocument == null))
                {
                    this.mUIYoursearchfound1VillDocument = new UIYoursearchfound1VillDocument(this);
                }
                return this.mUIYoursearchfound1VillDocument;
            }
        }
        #endregion
        
        #region Fields
        private UIYoursearchfound1VillDocument mUIYoursearchfound1VillDocument;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIYoursearchfound1VillDocument : HtmlDocument
    {
        
        public UIYoursearchfound1VillDocument(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.Title, "Your search found", PropertyExpressionOperator.Contains));
            this.FilterProperties[HtmlDocument.PropertyNames.AbsolutePath] = "/search/searchresult";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.PageUrl, ".villaplus.com/search/searchresult", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your search found 1 Villa holidays;");
            #endregion
        }
        
        #region Properties
        public UIVResortfilterCustom UIVResortfilterCustom
        {
            get
            {
                if ((this.mUIVResortfilterCustom == null))
                {
                    this.mUIVResortfilterCustom = new UIVResortfilterCustom(this);
                }
                return this.mUIVResortfilterCustom;
            }
        }
        #endregion
        
        #region Fields
        private UIVResortfilterCustom mUIVResortfilterCustom;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIVResortfilterCustom : HtmlCustom
    {
        
        public UIVResortfilterCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties["TagName"] = "UL";
            this.FilterProperties["Class"] = "filters-checkboxlist";
            this.FilterProperties.Add(new PropertyExpression("ControlDefinition", "class=\"filters-checkboxlist\"", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Your search found 1 Villa holidays;");
            #endregion
        }
        
        #region Properties
        public HtmlCustom UICalisCustom
        {
            get
            {
                if ((this.mUICalisCustom == null))
                {
                    this.mUICalisCustom = new HtmlCustom(this);
                    #region Search Criteria
                    this.mUICalisCustom.SearchProperties["TagName"] = "LI";
                    this.mUICalisCustom.FilterProperties["Class"] = "active";
                    this.mUICalisCustom.FilterProperties["ControlDefinition"] = "class=\"active\"";
                    this.mUICalisCustom.WindowTitles.Add("Your search found 1 Villa holidays;");
                    #endregion
                }
                return this.mUICalisCustom;
            }
        }
        #endregion
        
        #region Fields
        private HtmlCustom mUICalisCustom;
        #endregion
    }
}
