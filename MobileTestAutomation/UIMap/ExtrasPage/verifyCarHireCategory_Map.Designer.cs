// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace MobileTestAutomation.UIMap.ExtrasPage.verifyCarHireCategory_MapClasses
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.HtmlControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    using MobileTestAutomation.Utility;
    using System.Configuration;
    using System.Data.SqlClient;

    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public partial class verifyCarHireCategory_Map : logWriter
    {

        /// <summary>
        /// verifyCarHireCategory_Method - Use 'verifyCarHireCategory_MethodExpectedValues' to pass parameters into this method.
        /// </summary>
        public string verifyCarHireCategory_Method(string CentreName, string AirportCodeName, string SelectYear, string selectDate, string InitialCatalog)
        {
            #region Variable Declarations
            HtmlDiv uICarCategory1AOpelAdaPane = this.UIHttpmobstaging1villaWindow.UIHttpmobstaging1villaDocument.UISec_1Custom.UICarCategory1AOpelAdaPane;
            HtmlCustom uISec1Custom1 = this.UIHttpmobstaging1villaWindow.UIHttpmobstaging1villaDocument.UISec_1Custom;
            #endregion
            uICarCategory1AOpelAdaPane.WaitForControlReady(100);
            string curntCarCategory = string.Empty;
            string beginCarCategory = string.Empty;
            string carsCategorylist = uICarCategory1AOpelAdaPane.InnerText;
            int carsCategoryValue = carsCategorylist.IndexOf("\r\n");
            String carCat = carsCategorylist.Remove(carsCategoryValue).TrimStart();
            beginCarCategory = carCat.Replace("Car Category", string.Empty).Trim();

            while (beginCarCategory != curntCarCategory)
            {
                getFromDB getData = new getFromDB();
                SqlDataReader dataReader = null;
                string sqlQuery = string.Empty;
                string CarID = string.Empty;
                string make = string.Empty;
                string CarHeader = string.Empty;
                string carsCategorylist1 = string.Empty;
                string Price = string.Empty;
                string carPrice = string.Empty;

                uICarCategory1AOpelAdaPane = this.UIHttpmobstaging1villaWindow.UIHttpmobstaging1villaDocument.UISec_1Custom.UICarCategory1AOpelAdaPane;

                if (curntCarCategory == string.Empty)
                {
                    carsCategorylist = uICarCategory1AOpelAdaPane.InnerText;
                    carsCategoryValue = carsCategorylist.IndexOf("\r\n");
                    carCat = carsCategorylist.Remove(carsCategoryValue).TrimStart();
                    curntCarCategory = carCat.Replace("Car Category", string.Empty).Trim();
                }
                else
                {
                    carsCategorylist = uICarCategory1AOpelAdaPane.InnerText;
                }

                //Generating the Car ID
                sqlQuery = "select ID , make from Cars where Centre = '" + CentreName + "' and AirportCode = '" + AirportCodeName + "' and Year = '" + SelectYear + "' and GroupCode = '" + curntCarCategory + "' ";
                dataReader = getData.getData(sqlQuery, InitialCatalog);
                while (dataReader.Read())
                {
                    CarID = (dataReader["ID"].ToString());
                    make = (dataReader["make"].ToString().Trim());
                }
                //Showing the available Car Features
                List<string> CarFeatures = new List<string>();
                CarFeatures.Add(curntCarCategory);
                CarFeatures.Add(make);
                sqlQuery = "select CarFeatures from cardetails where CarsID = '" + CarID + "' ";
                dataReader = getData.getData(sqlQuery, InitialCatalog);
                while (dataReader.Read())
                {
                    CarFeatures.Add(dataReader["CarFeatures"].ToString().Trim());
                }

                foreach (string tmpCarCaegory in CarFeatures)
                {
                    if (carsCategorylist.Contains(tmpCarCaegory))
                    {
                        WriteLogs("PASS : Add Amend Car Hire Section - Car Features Displayed on Page and DB is Matched - " + tmpCarCaegory);
                    }
                    else
                    {
                        WriteLogs("FAIL : Add Amend Car Hire Section - Car Features Displayed on Page and DB is Matched - " + tmpCarCaegory);
                    }
                }

                curntCarCategory = null;
                HtmlCustom uISec1Custom = this.UIHttpmobstaging1villaWindow.UIHttpmobstaging1villaDocument.UISec_1Custom;
                //Clicking the Next Car Button
                try
                {
                    HtmlCustom section = new HtmlCustom(mUIHttpmobstaging1villaWindow.UIHttpmobstaging1villaDocument);
                    section.SearchProperties[HtmlCustom.PropertyNames.Id] = "caroption_1";
                    HtmlDiv div = new HtmlDiv(section);
                    div.SearchProperties["class"] = "sliderOptions nest";
                    HtmlHyperlink find = new HtmlHyperlink(div);
                    find.SearchProperties["class"] = "btn bg-blue tleft small";
                    Mouse.Click(find);
                    WriteLogs("PASS : Clicked on the Next Car button");
                }
                catch (Exception ex)
                {
                    WriteLogs("FAIL : Not Clicked on the Next button ");
                    WriteLogs("----" + ex.Message.ToString());
                }
                //Clicking the Previous Car Button
                try
                {
                    HtmlCustom section1 = new HtmlCustom(mUIHttpmobstaging1villaWindow.UIHttpmobstaging1villaDocument);
                    section1.SearchProperties[HtmlCustom.PropertyNames.Id] = "caroption_1";
                    HtmlDiv div1 = new HtmlDiv(section1);
                    div1.SearchProperties["class"] = "sliderOptions nest";
                    HtmlHyperlink find1 = new HtmlHyperlink(div1);
                    find1.SearchProperties["class"] = "btn bg-blue tright small";
                    Mouse.Click(find1);
                    WriteLogs("PASS : Clicked on the Previous Car button");
                }

                catch (Exception ex)
                {
                    WriteLogs("FAIL : Not Clicked on the Previous Car button ");
                    WriteLogs("----" + ex.Message.ToString());
                }

                //Extracting current car hire category
                UITestControlCollection ui = uISec1Custom.GetChildren();

                for (int i = 0; i < ui.Count; i++)
                {
                    if (ui[i].GetProperty("class").ToString() == "car-hire content current")
                    {
                        carsCategorylist1 = ui[i].GetProperty("data-alt").ToString();
                        break;
                    }
                }
                curntCarCategory = carsCategorylist1.Replace("Car Category", string.Empty).Trim();
            }
            return curntCarCategory;
        }

        #region Properties
        public virtual verifyCarHireCategory_MethodExpectedValues verifyCarHireCategory_MethodExpectedValues
        {
            get
            {
                if ((this.mverifyCarHireCategory_MethodExpectedValues == null))
                {
                    this.mverifyCarHireCategory_MethodExpectedValues = new verifyCarHireCategory_MethodExpectedValues();
                }
                return this.mverifyCarHireCategory_MethodExpectedValues;
            }
        }

        public UIHttpmobstaging1villaWindow UIHttpmobstaging1villaWindow
        {
            get
            {
                if ((this.mUIHttpmobstaging1villaWindow == null))
                {
                    this.mUIHttpmobstaging1villaWindow = new UIHttpmobstaging1villaWindow();
                }
                return this.mUIHttpmobstaging1villaWindow;
            }
        }
        #endregion

        #region Fields
        private verifyCarHireCategory_MethodExpectedValues mverifyCarHireCategory_MethodExpectedValues;

        private UIHttpmobstaging1villaWindow mUIHttpmobstaging1villaWindow;
        #endregion
    }

    /// <summary>
    /// Parameters to be passed into 'verifyCarHireCategory_Method'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class verifyCarHireCategory_MethodExpectedValues
    {

        #region Fields
        /// <summary>
        /// Verify that the 'InnerText' property of 'Car Category 1A Opel Adam or similar (M' pane contains 'Car Category 1A
        ///Opel Adam or similar (MBMR)3 doors
        ///4 seats
        ///Air conditioning
        ///Radio CD
        ///Electric windows
        ///Central locking
        ///Petrol or diesel
        /// 4
        ///
        ///0
        ///
        ///1
        ///
        ///Manual
        ///Air Con
        ///
        ///The picture and information of the car is for guidance only.   
        ///
        ///£129.00'
        /// </summary>
        public string UICarCategory1AOpelAdaPaneInnerText = "Car Category 1A\r\nOpel Adam or similar (MBMR)3 doors\r\n4 seats\r\nAir conditioning\r\nR" +
            "adio CD\r\nElectric windows\r\nCentral locking\r\nPetrol or diesel\r\n 4\r\n\r\n0\r\n\r\n1\r\n\r\nMa" +
            "nual\r\nAir Con\r\n\r\nThe picture and information of the car is for guidance only.   " +
            "\r\n\r\n£129.00";
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpmobstaging1villaWindow : BrowserWindow
    {

        public UIHttpmobstaging1villaWindow()
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(UITestControl.PropertyNames.Name, "/booking/Extras/AddAmendCarHire", PropertyExpressionOperator.Contains));
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "IEFrame";
            #endregion
        }

        public void LaunchUrl(System.Uri url)
        {
            this.CopyFrom(BrowserWindow.Launch(url));
        }

        #region Properties
        public UIHttpmobstaging1villaDocument UIHttpmobstaging1villaDocument
        {
            get
            {
                if ((this.mUIHttpmobstaging1villaDocument == null))
                {
                    this.mUIHttpmobstaging1villaDocument = new UIHttpmobstaging1villaDocument(this);
                }
                return this.mUIHttpmobstaging1villaDocument;
            }
        }
        #endregion

        #region Fields
        private UIHttpmobstaging1villaDocument mUIHttpmobstaging1villaDocument;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UIHttpmobstaging1villaDocument : HtmlDocument
    {

        public UIHttpmobstaging1villaDocument(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[HtmlDocument.PropertyNames.Id] = "book";
            this.SearchProperties[HtmlDocument.PropertyNames.RedirectingPage] = "False";
            this.SearchProperties[HtmlDocument.PropertyNames.FrameDocument] = "False";
            this.FilterProperties.Add(new PropertyExpression(HtmlDocument.PropertyNames.AbsolutePath, "/booking/Extras/AddAmendCarHire", PropertyExpressionOperator.Contains));
            #endregion
        }

        #region Properties
        public UISec_1Custom UISec_1Custom
        {
            get
            {
                if ((this.mUISec_1Custom == null))
                {
                    this.mUISec_1Custom = new UISec_1Custom(this);
                }
                return this.mUISec_1Custom;
            }
        }
        #endregion

        #region Fields
        private UISec_1Custom mUISec_1Custom;
        #endregion
    }

    [GeneratedCode("Coded UITest Builder", "12.0.31101.0")]
    public class UISec_1Custom : HtmlCustom
    {

        public UISec_1Custom(UITestControl searchLimitContainer) :
            base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression("Id", "sec_1", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression("Class", "carsection", PropertyExpressionOperator.Contains));
            this.FilterProperties.Add(new PropertyExpression("ControlDefinition", "class=\"carsection\" id=\"sec_1\"", PropertyExpressionOperator.Contains));
            #endregion
        }

        #region Properties
        public HtmlDiv UICarCategory1AOpelAdaPane
        {
            get
            {
                if ((this.mUICarCategory1AOpelAdaPane == null))
                {
                    this.mUICarCategory1AOpelAdaPane = new HtmlDiv(this);
                    #region Search Criteria
                    this.mUICarCategory1AOpelAdaPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.Class, "car-hire content current", PropertyExpressionOperator.Contains));
                    this.mUICarCategory1AOpelAdaPane.FilterProperties.Add(new PropertyExpression(HtmlDiv.PropertyNames.ControlDefinition, "class=\"car-hire content current\" ", PropertyExpressionOperator.Contains));
                    #endregion
                }
                return this.mUICarCategory1AOpelAdaPane;
            }
        }
        #endregion

        #region Fields
        private HtmlDiv mUICarCategory1AOpelAdaPane;
        #endregion
    }
}
